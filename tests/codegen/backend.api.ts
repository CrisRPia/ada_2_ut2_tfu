/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * bitwardenclone
 * OpenAPI spec version: 1.0
 */
export interface LoginInfo {
  /** @minLength 1 */
  username: string;
  /** @minLength 1 */
  password: string;
}

export interface LoginRequest {
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  masterPassword: string;
}

export interface ProblemDetails {
  /** @nullable */
  type?: string | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  [key: string]: unknown;
}

export interface RegisterRequest {
  /** @minLength 1 */
  email: string;
  /** @minLength 8 */
  masterPassword: string;
}

export interface TokenResponse {
  /** @minLength 1 */
  token: string;
}

export interface VaultDecryptRequest {
  /** @minLength 1 */
  masterPassword: string;
}

/**
 * @nullable
 */
export type VaultDecryptResponseVaultData = { [key: string]: LoginInfo } | null;

export interface VaultDecryptResponse {
  /** @nullable */
  vaultData: VaultDecryptResponseVaultData;
}

export interface VaultRequest {
  /** @minLength 1 */
  encryptedData: string;
}

export interface VaultResponse {
  /** @minLength 1 */
  encryptedData: string;
}

export type VaultUpdateRequestVaultData = { [key: string]: LoginInfo };

export interface VaultUpdateRequest {
  /** @minLength 1 */
  masterPassword: string;
  vaultData: VaultUpdateRequestVaultData;
}

export type GetPingParams = {
  echoThis?: string;
};

export type postAuthRegisterResponse200 = {
  data: TokenResponse;
  status: 200;
};

export type postAuthRegisterResponse409 = {
  data: ProblemDetails;
  status: 409;
};

export type postAuthRegisterResponseComposite =
  | postAuthRegisterResponse200
  | postAuthRegisterResponse409;

export type postAuthRegisterResponse = postAuthRegisterResponseComposite & {
  headers: Headers;
};

export const getPostAuthRegisterUrl = () => {
  return `http://localhost:8080/auth/register`;
};

export const postAuthRegister = async (
  registerRequest: RegisterRequest,
  options?: RequestInit,
): Promise<postAuthRegisterResponse> => {
  const res = await fetch(getPostAuthRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(registerRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postAuthRegisterResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postAuthRegisterResponse;
};

export type postAuthLoginResponse200 = {
  data: TokenResponse;
  status: 200;
};

export type postAuthLoginResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type postAuthLoginResponseComposite =
  | postAuthLoginResponse200
  | postAuthLoginResponse401;

export type postAuthLoginResponse = postAuthLoginResponseComposite & {
  headers: Headers;
};

export const getPostAuthLoginUrl = () => {
  return `http://localhost:8080/auth/login`;
};

export const postAuthLogin = async (
  loginRequest: LoginRequest,
  options?: RequestInit,
): Promise<postAuthLoginResponse> => {
  const res = await fetch(getPostAuthLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postAuthLoginResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postAuthLoginResponse;
};

export type postClientEncryptAndUpdateVaultResponse204 = {
  data: void;
  status: 204;
};

export type postClientEncryptAndUpdateVaultResponse400 = {
  data: ProblemDetails;
  status: 400;
};

export type postClientEncryptAndUpdateVaultResponseComposite =
  | postClientEncryptAndUpdateVaultResponse204
  | postClientEncryptAndUpdateVaultResponse400;

export type postClientEncryptAndUpdateVaultResponse =
  postClientEncryptAndUpdateVaultResponseComposite & {
    headers: Headers;
  };

export const getPostClientEncryptAndUpdateVaultUrl = () => {
  return `http://localhost:8080/client/encrypt-and-update-vault`;
};

export const postClientEncryptAndUpdateVault = async (
  vaultUpdateRequest: VaultUpdateRequest,
  options?: RequestInit,
): Promise<postClientEncryptAndUpdateVaultResponse> => {
  const res = await fetch(getPostClientEncryptAndUpdateVaultUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(vaultUpdateRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postClientEncryptAndUpdateVaultResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postClientEncryptAndUpdateVaultResponse;
};

export type postClientDecryptVaultResponse200 = {
  data: VaultDecryptResponse;
  status: 200;
};

export type postClientDecryptVaultResponse400 = {
  data: ProblemDetails;
  status: 400;
};

export type postClientDecryptVaultResponseComposite =
  | postClientDecryptVaultResponse200
  | postClientDecryptVaultResponse400;

export type postClientDecryptVaultResponse =
  postClientDecryptVaultResponseComposite & {
    headers: Headers;
  };

export const getPostClientDecryptVaultUrl = () => {
  return `http://localhost:8080/client/decrypt-vault`;
};

export const postClientDecryptVault = async (
  vaultDecryptRequest: VaultDecryptRequest,
  options?: RequestInit,
): Promise<postClientDecryptVaultResponse> => {
  const res = await fetch(getPostClientDecryptVaultUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(vaultDecryptRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postClientDecryptVaultResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postClientDecryptVaultResponse;
};

export type getPingResponse200 = {
  data: string;
  status: 200;
};

export type getPingResponseComposite = getPingResponse200;

export type getPingResponse = getPingResponseComposite & {
  headers: Headers;
};

export const getGetPingUrl = (params?: GetPingParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8080/ping?${stringifiedParams}`
    : `http://localhost:8080/ping`;
};

export const getPing = async (
  params?: GetPingParams,
  options?: RequestInit,
): Promise<getPingResponse> => {
  const res = await fetch(getGetPingUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getPingResponse["data"] = body as any as string;

  return { data, status: res.status, headers: res.headers } as getPingResponse;
};

export type putServerVaultResponse204 = {
  data: void;
  status: 204;
};

export type putServerVaultResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type putServerVaultResponseComposite =
  | putServerVaultResponse204
  | putServerVaultResponse401;

export type putServerVaultResponse = putServerVaultResponseComposite & {
  headers: Headers;
};

export const getPutServerVaultUrl = () => {
  return `http://localhost:8080/server/vault`;
};

export const putServerVault = async (
  vaultRequest: VaultRequest,
  options?: RequestInit,
): Promise<putServerVaultResponse> => {
  const res = await fetch(getPutServerVaultUrl(), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(vaultRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: putServerVaultResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as putServerVaultResponse;
};

export type getServerVaultResponse200 = {
  data: VaultResponse;
  status: 200;
};

export type getServerVaultResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type getServerVaultResponseComposite =
  | getServerVaultResponse200
  | getServerVaultResponse401;

export type getServerVaultResponse = getServerVaultResponseComposite & {
  headers: Headers;
};

export const getGetServerVaultUrl = () => {
  return `http://localhost:8080/server/vault`;
};

export const getServerVault = async (
  options?: RequestInit,
): Promise<getServerVaultResponse> => {
  const res = await fetch(getGetServerVaultUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getServerVaultResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as getServerVaultResponse;
};
